// Mocks generated by Mockito 5.1.0 from annotations
// in ditonton/test/presentation/bloc/detail_movie_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i7;

import 'package:dartz/dartz.dart' as _i5;
import 'package:ditonton/common/failure.dart' as _i10;
import 'package:ditonton/domain/entities/movie/movie_detail.dart' as _i11;
import 'package:ditonton/domain/repositories/movie_repository.dart' as _i4;
import 'package:ditonton/domain/usecases/movie/get_movie_detail.dart' as _i2;
import 'package:ditonton/presentation/bloc/movie/detail_movie/detail_movie_bloc.dart'
    as _i6;
import 'package:ditonton/presentation/bloc/movie/detail_movie/detail_movie_event.dart'
    as _i8;
import 'package:ditonton/presentation/bloc/movie/detail_movie/detail_movie_state.dart'
    as _i3;
import 'package:flutter_bloc/flutter_bloc.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeGetMovieDetail_0 extends _i1.Fake implements _i2.GetMovieDetail {}

class _FakeDetailMovieState_1 extends _i1.Fake implements _i3.DetailMovieState {
}

class _FakeMovieRepository_2 extends _i1.Fake implements _i4.MovieRepository {}

class _FakeEither_3<L, R> extends _i1.Fake implements _i5.Either<L, R> {}

/// A class which mocks [DetailMovieBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockDetailMovieBloc extends _i1.Mock implements _i6.DetailMovieBloc {
  MockDetailMovieBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetMovieDetail get getMovieDetail =>
      (super.noSuchMethod(Invocation.getter(#getMovieDetail),
          returnValue: _FakeGetMovieDetail_0()) as _i2.GetMovieDetail);
  @override
  _i3.DetailMovieState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
          returnValue: _FakeDetailMovieState_1()) as _i3.DetailMovieState);
  @override
  _i7.Stream<_i3.DetailMovieState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i3.DetailMovieState>.empty())
          as _i7.Stream<_i3.DetailMovieState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i8.DetailMovieEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i8.DetailMovieEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i3.DetailMovieState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i8.DetailMovieEvent>(
          _i9.EventHandler<E, _i3.DetailMovieState>? handler,
          {_i9.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i9.Transition<_i8.DetailMovieEvent, _i3.DetailMovieState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i7.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i7.Future<void>);
  @override
  void onChange(_i9.Change<_i3.DetailMovieState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}

/// A class which mocks [GetMovieDetail].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetMovieDetail extends _i1.Mock implements _i2.GetMovieDetail {
  MockGetMovieDetail() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.MovieRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeMovieRepository_2()) as _i4.MovieRepository);
  @override
  _i7.Future<_i5.Either<_i10.Failure, _i11.MovieDetail>> execute(int? id) =>
      (super.noSuchMethod(Invocation.method(#execute, [id]),
          returnValue: Future<_i5.Either<_i10.Failure, _i11.MovieDetail>>.value(
              _FakeEither_3<_i10.Failure, _i11.MovieDetail>())) as _i7
          .Future<_i5.Either<_i10.Failure, _i11.MovieDetail>>);
}
